package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FilterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFilterAllPropertiesEquals(Filter expected, Filter actual) {
        assertFilterAutoGeneratedPropertiesEquals(expected, actual);
        assertFilterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFilterAllUpdatablePropertiesEquals(Filter expected, Filter actual) {
        assertFilterUpdatableFieldsEquals(expected, actual);
        assertFilterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFilterAutoGeneratedPropertiesEquals(Filter expected, Filter actual) {
        assertThat(actual)
            .as("Verify Filter auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFilterUpdatableFieldsEquals(Filter expected, Filter actual) {
        assertThat(actual)
            .as("Verify Filter relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getVisualization()).as("check visualization").isEqualTo(expected.getVisualization()))
            .satisfies(a -> assertThat(a.getTypeOfChart()).as("check typeOfChart").isEqualTo(expected.getTypeOfChart()))
            .satisfies(a -> assertThat(a.getEmotions()).as("check emotions").isEqualTo(expected.getEmotions()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFilterUpdatableRelationshipsEquals(Filter expected, Filter actual) {
        assertThat(actual)
            .as("Verify Filter relationships")
            .satisfies(a -> assertThat(a.getSearch()).as("check search").isEqualTo(expected.getSearch()));
    }
}
