package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParameterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParameterAllPropertiesEquals(Parameter expected, Parameter actual) {
        assertParameterAutoGeneratedPropertiesEquals(expected, actual);
        assertParameterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParameterAllUpdatablePropertiesEquals(Parameter expected, Parameter actual) {
        assertParameterUpdatableFieldsEquals(expected, actual);
        assertParameterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParameterAutoGeneratedPropertiesEquals(Parameter expected, Parameter actual) {
        assertThat(actual)
            .as("Verify Parameter auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParameterUpdatableFieldsEquals(Parameter expected, Parameter actual) {
        assertThat(actual)
            .as("Verify Parameter relevant properties")
            .satisfies(a -> assertThat(a.getTerms()).as("check terms").isEqualTo(expected.getTerms()))
            .satisfies(a -> assertThat(a.getWebSite()).as("check webSite").isEqualTo(expected.getWebSite()))
            .satisfies(a -> assertThat(a.getInstagram()).as("check instagram").isEqualTo(expected.getInstagram()))
            .satisfies(a -> assertThat(a.getFacebook()).as("check facebook").isEqualTo(expected.getFacebook()))
            .satisfies(a -> assertThat(a.getLinkedin()).as("check linkedin").isEqualTo(expected.getLinkedin()))
            .satisfies(a -> assertThat(a.getX()).as("check x").isEqualTo(expected.getX()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParameterUpdatableRelationshipsEquals(Parameter expected, Parameter actual) {
        assertThat(actual)
            .as("Verify Parameter relationships")
            .satisfies(a -> assertThat(a.getSearch()).as("check search").isEqualTo(expected.getSearch()));
    }
}
